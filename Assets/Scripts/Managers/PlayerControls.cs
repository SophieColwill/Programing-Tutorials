//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Managers/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Playing Game"",
            ""id"": ""38edb5e6-a4db-4873-bd85-825161986bac"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""aed161e7-d79a-410c-b5d0-3133b621156a"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""b708fe3f-992c-4402-a940-cd958ce562ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a0b18e94-e584-4e05-b84b-5482646ef1d1"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""2f94fd3d-a939-465f-b4e0-2e31656af36b"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""afdca96d-439a-4790-9a21-ee63b4267dec"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""ef3cb70a-d399-445b-affd-95f5efc51a01"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""007ba8a3-a3ac-4f40-989f-0f2bbad82a33"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""f96eda43-dd1d-4ed0-a632-b76b1830fe02"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Forward"",
                    ""id"": ""cb86f701-1593-4932-9a34-a3a8fd8a4449"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Backward"",
                    ""id"": ""070365dd-9ee5-4140-9858-8cb660a55c09"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4c42407b-cf6c-40d1-863e-2721ee3a1897"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI Mode"",
            ""id"": ""6bfd1ccc-8dc7-432c-b5d5-e42d44db7125"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""7f726cd9-1874-4c30-be21-4b21d98f3d7d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""aaeb4776-10b0-476b-8714-5f54fbe6ea25"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Permenant"",
            ""id"": ""a52d497d-4d89-427c-b6bd-964aaa8afa27"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""2d7a71ab-4f1e-416b-aa4d-80a0037e541f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ce45194a-25ec-4d89-9da3-72f6c640f87b"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Playing Game
        m_PlayingGame = asset.FindActionMap("Playing Game", throwIfNotFound: true);
        m_PlayingGame_Movement = m_PlayingGame.FindAction("Movement", throwIfNotFound: true);
        m_PlayingGame_Shoot = m_PlayingGame.FindAction("Shoot", throwIfNotFound: true);
        // UI Mode
        m_UIMode = asset.FindActionMap("UI Mode", throwIfNotFound: true);
        m_UIMode_Newaction = m_UIMode.FindAction("New action", throwIfNotFound: true);
        // Permenant
        m_Permenant = asset.FindActionMap("Permenant", throwIfNotFound: true);
        m_Permenant_Newaction = m_Permenant.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Playing Game
    private readonly InputActionMap m_PlayingGame;
    private List<IPlayingGameActions> m_PlayingGameActionsCallbackInterfaces = new List<IPlayingGameActions>();
    private readonly InputAction m_PlayingGame_Movement;
    private readonly InputAction m_PlayingGame_Shoot;
    public struct PlayingGameActions
    {
        private @PlayerControls m_Wrapper;
        public PlayingGameActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayingGame_Movement;
        public InputAction @Shoot => m_Wrapper.m_PlayingGame_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_PlayingGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayingGameActions set) { return set.Get(); }
        public void AddCallbacks(IPlayingGameActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayingGameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayingGameActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
        }

        private void UnregisterCallbacks(IPlayingGameActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
        }

        public void RemoveCallbacks(IPlayingGameActions instance)
        {
            if (m_Wrapper.m_PlayingGameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayingGameActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayingGameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayingGameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayingGameActions @PlayingGame => new PlayingGameActions(this);

    // UI Mode
    private readonly InputActionMap m_UIMode;
    private List<IUIModeActions> m_UIModeActionsCallbackInterfaces = new List<IUIModeActions>();
    private readonly InputAction m_UIMode_Newaction;
    public struct UIModeActions
    {
        private @PlayerControls m_Wrapper;
        public UIModeActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_UIMode_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_UIMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIModeActions set) { return set.Get(); }
        public void AddCallbacks(IUIModeActions instance)
        {
            if (instance == null || m_Wrapper.m_UIModeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIModeActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IUIModeActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IUIModeActions instance)
        {
            if (m_Wrapper.m_UIModeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIModeActions instance)
        {
            foreach (var item in m_Wrapper.m_UIModeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIModeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIModeActions @UIMode => new UIModeActions(this);

    // Permenant
    private readonly InputActionMap m_Permenant;
    private List<IPermenantActions> m_PermenantActionsCallbackInterfaces = new List<IPermenantActions>();
    private readonly InputAction m_Permenant_Newaction;
    public struct PermenantActions
    {
        private @PlayerControls m_Wrapper;
        public PermenantActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Permenant_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Permenant; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PermenantActions set) { return set.Get(); }
        public void AddCallbacks(IPermenantActions instance)
        {
            if (instance == null || m_Wrapper.m_PermenantActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PermenantActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IPermenantActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IPermenantActions instance)
        {
            if (m_Wrapper.m_PermenantActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPermenantActions instance)
        {
            foreach (var item in m_Wrapper.m_PermenantActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PermenantActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PermenantActions @Permenant => new PermenantActions(this);
    public interface IPlayingGameActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
    public interface IUIModeActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IPermenantActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
